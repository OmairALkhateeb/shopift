import React, { Fragment, useState, useEffect } from 'react';
import { useRouter } from 'next/router'; // Import useRouter from Next.js
import { Container } from 'react-bootstrap';
import useHostname from '@/Components/Provider/HostnameProvider';
import Layout from '@/Components/Layout/Layout';
import { ReactSVG } from 'react-svg';
import 'flag-icons/css/flag-icons.min.css';
import DataCustomTable from '@/Components/Table/DataCustomTable';
import SecTop from '@/Components/Section/SecTop';

const Order = () => {
  const originalUrl = useHostname();
  const [dataTable, setDataTable] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const router = useRouter(); // Initialize the router

  useEffect(() => {
    // Function to fetch orders
    const fetchOrders = async () => {
        console.log("Fetch orders process started.");
        setIsLoading(true);
        try {
          console.log("Retrieving token...");
          const token = localStorage.getItem('token'); // Modify this based on your token storage method
          console.log("Token:", token);
      
          if (!token) {
            console.error("Token is missing or expired.");
            alert('Token is missing or expired');
            router.push('/auth/login'); // Redirect to login
            return;
          }
      
          console.log("Fetching orders...");
          const response = await fetch('https://fantasia-shop.com/api/orders', {
            headers: {
              Authorization: `Bearer ${token}`,
            },
          });
      
          console.log("Response status:", response.status);
          if (!response.ok) {
            if (response.status === 401) {
              console.warn("Unauthorized, redirecting to login.");
              alert('Unauthorized, please log in again');
              router.push('/auth/login'); // Redirect to login if unauthorized
              return;
            }
            throw new Error('Failed to fetch orders');
          }
      
          console.log("Parsing response data...");
          const data = await response.json();
          console.log("Raw API data:", data);
      
          console.log("Formatting data...");
          const formattedData = data.map((order) => ({
            id: order.id,
            order: `Order #${order.id}`,
            date: new Date(order.created_at).toLocaleDateString(),
            customer: {
              img: originalUrl + '/images/customer-placeholder.png', // Replace with actual image path
              name: order.full_name,
              email: order.email,
            },
            payment: order.payment_method.replace('_', ' '),
            status: order.status,
            total: `$${order.total_price}`,
            address: `${order.address_1}, ${order.address_2}, ${order.city}, ${order.state}`,
          }));
      
          console.log("Formatted data:", formattedData);
          setDataTable(formattedData);
        } catch (err) {
          console.error("Error occurred:", err.message);
          setError(err.message);
        } finally {
          console.log("Process finished. Loading state set to false.");
          setIsLoading(false);
        }
      };
      
      

    fetchOrders();
  }, [originalUrl, router]);

  return (
    <Fragment>
      <Layout title="Order" description="Order Desc" dashboard={true}>
        <SecTop title="Order List" subtitle="Track orders list across your store.">
          <div className="flex items-center gap-3">
            <a href="#!" className="inline-block px-3 py-2 rounded-[8px] bg-Mmaincolorgreen text-white">
              <div className="flex items-center gap-2">
                <ReactSVG src={originalUrl + '/images/export.svg'} />
                <p className="font-medium text__14">Export</p>
              </div>
            </a>
          </div>
        </SecTop>

        <section className="pt-0 pb-4">
          <Container>
            <div className="flex items-center gap-2 px-2 mb-4 w-full">
              <img src={originalUrl + '/images/search.svg'} alt="Search" />
              <input
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                type="text"
                className="font-medium w-full text__14 placeholder:text-Mtexttextinvert bg-transparent border-none outline-none hover:focus:active:outline-none hover:focus:active:border-none"
                placeholder="Search order..."
              />
            </div>

            {isLoading ? (
              <p>Loading orders...</p>
            ) : error ? (
              <p className="text-red-500">Error: {error}</p>
            ) : (
              <DataCustomTable
                data={dataTable}
                searchTerm={searchTerm}
                paging={true}
                info={true}
              />
            )}
          </Container>
        </section>
      </Layout>
    </Fragment>
  );
};

export default Order;
